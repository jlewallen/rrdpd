#!/usr/bin/env ruby

require 'socket'
require 'rrdpd'
require 'logger'
require 'yaml'

class UdpServer
  def initialize(slices, cfg)
    @slices = slices
    @cfg = cfg
  end

  def run
    Socket.do_not_reverse_lookup = true
    interrupted = false
    trap("INT") { interrupted = true }
    incoming = UDPSocket.new
    incoming.bind('0.0.0.0', @cfg.port)
    mark = Time.new
    loop do
      if IO.select([ incoming ], [], [], 1) then
        process(incoming.recvfrom(256))
      end
      if Time.new - mark > @cfg.write_interval then
        Configuration.log.info("Applying Writers...")
        @slices.rollup
        mark = Time.new
      end
      break if interrupted
    end
  end

  private
  def process(raw)
    source = raw[1][2]
    Configuration.log.debug(source + ": " + raw[0])
    fields = raw[0].split(":")
    message = Message.new(source, fields[0], fields[1].to_f)
    @slices.add(message)
  end
end

class ConfigurationFile
  def initialize()
    @settings = YAML.load_file("rrdpd.conf")
  end

  def to_configuration
    data = Pathname.new(@settings["data"])
    slice_interval = @settings["slice-interval"].to_i
    write_interval = @settings["write-interval"].to_i
    Configuration.new(data, slice_interval, write_interval)
  end
end

cfg_file = ConfigurationFile.new
cfg = cfg_file.to_configuration
p cfg
Configuration.log = Logger.new(STDOUT)
Configuration.log.level = Logger::INFO
writers = [ YesOrNo.new(cfg), Quartiles.new(cfg) ]
slices = Slices.new(cfg, writers)
server = UdpServer.new(slices, cfg)
server.run
slices.rollup(true)
